{
  "name": "node-kissdi",
  "version": "1.0.3",
  "description": "Super Simple Dependecy Injection for NodeJS/IO.js",
  "main": "./lib/kissdi.js",
  "scripts": {
    "test": "./node_modules/gulp/bin/gulp.js gulpfile-syntax test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Forumouth/node-kissdi.git"
  },
  "keywords": [
    "Dependency Injection",
    "DI"
  ],
  "author": {
    "name": "Hiroaki Yamamoto",
    "email": "admin@hysoftware.net"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/forumouth/node-kissdi/issues"
  },
  "homepage": "https://github.com/forumouth/node-kissdi",
  "devDependencies": {
    "chai": "^2.3.0",
    "coffee-script": "^1.9.2",
    "gulp": "^3.8.11",
    "gulp-coffee": "^2.3.1",
    "gulp-coffeelint": "^0.4.0",
    "gulp-mocha": "^2.0.1",
    "gulp-notify": "^2.2.0",
    "gulp-plumber": "^1.0.0"
  },
  "dependencies": {
    "deepcopy": "^0.5.0"
  },
  "readme": "# Simple Dependency Injection for NodeJS\n[![Build Status](https://travis-ci.org/Forumouth/node-kissdi.svg)](https://travis-ci.org/Forumouth/node-kissdi)\n\n[![NPM](https://nodei.co/npm/node-kissdi.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/node-kissdi/)\n\n## What this?\nThis lib provides [Dependency Injection](https://msdn.microsoft.com/en-us/magazine/cc163739.aspx)\nto NodeJS by super-simple approach.\n\n## How to install\nJust run ```npm install kissdi```\n\n## How to use\nAlso just simple!\n\n```JavaScript\n// kissdi has a function named 'inject' as library's member.\ninject = require(\"node-kissdi\").inject\n/*\n * To inject a function, we need to create a \"target function\"\n * the target function should be an instance of Array that has a function as\n * a last element. i.e.\n */\nvar target = [\n    \"foo\",\n    \"bar\",\n    function (foo, bar) {\n        return function () {\n            return [foo, bar];\n        };\n    }\n];\n\n// Then, call inject like this\nvar injected_func = inject(\n    target,\n    {\n        \"foo\": \"Hello\",\n        \"bar\": \"World\"\n    }\n);\n\n// To obtain the return value from the target, call inject_func.invoke\nvar func = inject_func.invoke();\n// Because the target function is a closure, we need to call it once more.\n// Therefore, needs to call func if we obtain the result list\nvar list = func()\n// expect: [\"Hello\", \"World\"]\n\n// Calling invoke with an object that has corresponding paramenters as keys,\n// the corresponding parameters are replaced with the given values.\nvar func = inject_func.invoke({\n   \"foo\": \"Konichiwa\"\n});\n// func() returns [\"Konichiwa\", \"World\"]\nvar list = func()\n// expect: [\"Konichiwa\", \"World\"]\n```\n",
  "readmeFilename": "README.md",
  "_id": "node-kissdi@1.0.3",
  "dist": {
    "shasum": "0ba67fbbc0fbe988ee923e8655b550860377a9be"
  },
  "_from": "node-kissdi@^1.0.3",
  "_resolved": "https://registry.npmjs.org/node-kissdi/-/node-kissdi-1.0.3.tgz"
}
